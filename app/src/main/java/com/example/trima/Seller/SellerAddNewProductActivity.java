 package com.example.trima.Seller;import androidx.annotation.NonNull;import androidx.annotation.Nullable;import androidx.appcompat.app.AppCompatActivity;import androidx.recyclerview.widget.LinearLayoutManager;import androidx.recyclerview.widget.RecyclerView;import android.app.ProgressDialog;import android.content.ClipData;import android.content.Intent;import android.graphics.Bitmap;import android.net.Uri;import android.os.Bundle;import android.text.TextUtils;import android.view.View;import android.widget.Button;import android.widget.EditText;import android.widget.ImageView;import android.widget.Toast;import com.example.trima.R;import com.google.android.gms.tasks.Continuation;import com.google.android.gms.tasks.OnCompleteListener;import com.google.android.gms.tasks.OnFailureListener;import com.google.android.gms.tasks.OnSuccessListener;import com.google.android.gms.tasks.Task;import com.google.firebase.auth.FirebaseAuth;import com.google.firebase.database.DataSnapshot;import com.google.firebase.database.DatabaseError;import com.google.firebase.database.DatabaseReference;import com.google.firebase.database.FirebaseDatabase;import com.google.firebase.database.ValueEventListener;import com.google.firebase.storage.FirebaseStorage;import com.google.firebase.storage.StorageReference;import com.google.firebase.storage.UploadTask;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Calendar;import java.util.HashMap;import java.util.List;public class SellerAddNewProductActivity extends AppCompatActivity {    private String category, description, price, pname, downloadImageurl, pdiscount;    private int pquantity;    private String saveCurrentDate, saveCurrentTime, productRandomKey;    private EditText product_name, product_price, product_description, product_quantity, product_discount;    private Button publish_product, uploadimage;    private ProgressDialog loading;    private static final int GalleryPick = 1;    private Uri imageUri;    private String sellerId = "";    private StorageReference productImageRef;    private DatabaseReference productref, sellerref;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_seller_add_new_product);        category = getIntent().getExtras().get("Category").toString();        productImageRef = FirebaseStorage.getInstance().getReference().child("Product Image");        productref = FirebaseDatabase.getInstance().getReference().child("Products");        sellerref = FirebaseDatabase.getInstance().getReference().child("Seller Details");        loading = new ProgressDialog(this);        product_name = (EditText) findViewById(R.id.Upload_product_name);        product_price = (EditText) findViewById(R.id.Upload_product_Price);        product_description = (EditText) findViewById(R.id.Upload_product_Description);        publish_product = (Button) findViewById(R.id.Upload_product);        uploadimage = (Button)findViewById(R.id.gallery_image_upload);        product_quantity = (EditText)findViewById(R.id.Upload_product_quantity);        product_discount = (EditText)findViewById(R.id.Upload_product_discount);        uploadimage.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                openGallery();            }        });        publish_product.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                ValidateProductData();            }        });        sellerref.child(FirebaseAuth.getInstance().getCurrentUser().getUid())                .addValueEventListener(new ValueEventListener() {                    @Override                    public void onDataChange(@NonNull DataSnapshot snapshot) {                        if (snapshot.exists()){                            sellerId = snapshot.child("SellerId").getValue().toString();                        }                    }                    @Override                    public void onCancelled(@NonNull DatabaseError error) {                    }                });    }  private void ValidateProductData() {        description = product_description.getText().toString();        price = product_price.getText().toString();        pname = product_name.getText().toString();        pquantity = Integer.parseInt(product_quantity.getText().toString());        pdiscount = product_discount.getText().toString();        if(imageUri == null) {            Toast.makeText(this, "Product Image is Mandatory", Toast.LENGTH_SHORT).show();        }else if(TextUtils.isEmpty(description)){            Toast.makeText(this, "Please provide product description", Toast.LENGTH_SHORT).show();        }else if(TextUtils.isEmpty(price)){            Toast.makeText(this, "Please provide product price", Toast.LENGTH_SHORT).show();        }else if(TextUtils.isEmpty(pname)){            Toast.makeText(this, "Please provide product name", Toast.LENGTH_SHORT).show();        }else if(pquantity == 0){            Toast.makeText(this, "Please provide the quantity of product you have", Toast.LENGTH_SHORT).show();        }        else{            storeProductDetails();        }    }    private void storeProductDetails() {        loading.setTitle("Uploading Product..");        loading.setMessage("Dear Seller, please wait uploading product...");        loading.setCanceledOnTouchOutside(false);        loading.show();        Calendar calendar = Calendar.getInstance();        SimpleDateFormat currentDate = new SimpleDateFormat("MMM dd, yyyy");        saveCurrentDate = currentDate.format(calendar.getTime());        SimpleDateFormat currentTime = new SimpleDateFormat("HH:mm:ss a");        saveCurrentTime = currentTime.format(calendar.getTime());        productRandomKey = saveCurrentDate + saveCurrentTime;        //Reference to firebase storage        final StorageReference filePath = productImageRef.child(imageUri.getLastPathSegment() + productRandomKey + ".jpg");        final UploadTask uploadTask = filePath.putFile(imageUri);        uploadTask.addOnFailureListener(new OnFailureListener() {            @Override            public void onFailure(@NonNull Exception e) {                String message = e.toString();                Toast.makeText(SellerAddNewProductActivity.this, "Error : " + message , Toast.LENGTH_SHORT).show();                loading.dismiss();            }        }).addOnSuccessListener(new OnSuccessListener<UploadTask.TaskSnapshot>() {            @Override            public void onSuccess(UploadTask.TaskSnapshot taskSnapshot) {                Toast.makeText(SellerAddNewProductActivity.this, "Product Image Uploaded Successfully...", Toast.LENGTH_SHORT).show();                Task<Uri> uriTask = uploadTask.continueWithTask(new Continuation<UploadTask.TaskSnapshot, Task<Uri>>() {                    @Override                    public Task<Uri> then(@NonNull Task<UploadTask.TaskSnapshot> task) throws Exception {                        if(!task.isSuccessful()){                            throw task.getException();                        }                        downloadImageurl = filePath.getDownloadUrl().toString();                        return filePath.getDownloadUrl();                    }                }).addOnCompleteListener(new OnCompleteListener<Uri>() {                    @Override                    public void onComplete(@NonNull Task<Uri> task) {                        if(task.isSuccessful()){                            downloadImageurl = task.getResult().toString();                            Toast.makeText(SellerAddNewProductActivity.this, "Product Image saved to database successfully", Toast.LENGTH_SHORT).show();                            saveProductInfoToDatabse();                        }                    }                });            }        });    }    private void saveProductInfoToDatabse() {        HashMap<String, Object> productInfo = new HashMap<>();        productInfo.put("Pid", productRandomKey);        productInfo.put("Date", saveCurrentDate);        productInfo.put("Time", saveCurrentTime);        productInfo.put("Description", description);        productInfo.put("Image", downloadImageurl);        productInfo.put("Category", category);        productInfo.put("Price", price);        productInfo.put("ProductName", pname);        productInfo.put("ProductQuantity", pquantity);        productInfo.put("ProductDiscount", pdiscount);        productInfo.put("ProductState", "Not Approved");        productInfo.put("SellerId", sellerId);        productref.child(productRandomKey).updateChildren(productInfo)                .addOnCompleteListener(new OnCompleteListener<Void>() {                    @Override                    public void onComplete(@NonNull Task<Void> task) {                        if(task.isSuccessful()){                            loading.dismiss();                            Intent i = new Intent(SellerAddNewProductActivity.this, SellerHomeActivity.class);                            startActivity(i);                            Toast.makeText(SellerAddNewProductActivity.this, "Product is added Successfully", Toast.LENGTH_SHORT).show();                        }else{                            loading.dismiss();                            String message = task.getException().toString();                            Toast.makeText(SellerAddNewProductActivity.this, "Error : " + message, Toast.LENGTH_SHORT).show();                        }                    }                });    }    private void openGallery() {        Intent i = new Intent();        i.setAction(Intent.ACTION_GET_CONTENT);        i.setType("image/*");        //i.putExtra(Intent.EXTRA_ALLOW_MULTIPLE,true);        startActivityForResult(i, GalleryPick);    }    @Override    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {        super.onActivityResult(requestCode, resultCode, data);        if(requestCode == GalleryPick && resultCode == RESULT_OK && data != null){            ImageView iv = findViewById(R.id.product_image);            imageUri = data.getData();            iv.setImageURI(imageUri);        }    }}/** if(requestCode == GalleryPick && resultCode == RESULT_OK){            final ImageView iv = findViewById(R.id.product_image);            final List<Bitmap> bitmaps = new ArrayList<>();            ClipData clipData = data.getClipData();            if(clipData != null){                for(int i = 0; i < clipData.getItemCount(); i++){                    Uri imageuri = clipData.getItemAt(i).getUri();                    try {                        InputStream is = getContentResolver().openInputStream(imageuri);                        Bitmap bitmap = BitmapFactory.decodeStream(is);                        bitmaps.add(bitmap);                    } catch (FileNotFoundException e) {                        e.printStackTrace();                    }                }            }else{                Uri imageuri = data.getData();                try {                    InputStream is = getContentResolver().openInputStream(imageuri);                    Bitmap bitmap = BitmapFactory.decodeStream(is);                    bitmaps.add(bitmap);                } catch (FileNotFoundException e) {                    e.printStackTrace();                }            }            new Thread(new Runnable() {                @Override                public void run() {                    for(final Bitmap b : bitmaps){                        runOnUiThread(new Runnable() {                            @Override                            public void run() {                                iv.setImageBitmap(b);                            }                        });                        try {                            Thread.sleep(3000);                        } catch (InterruptedException e) {                            e.printStackTrace();                        }                    }                }            }).start();*/